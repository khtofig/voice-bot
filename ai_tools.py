import sqlite3
import re
from datetime import datetime, timedelta

class AITools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π confidence scoring, fallback –ª–æ–≥–∏–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–æ–ª–∏–∫–∞–º–∏"""
    
    def __init__(self, db_path='restaurant.db'):
        self.db_path = db_path
        
        # Fallback —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
        self.fallback_phrases = {
            'low_confidence': [
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?",
                "–ù–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
                "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
            ],
            'no_data': [
                "–ú–∏–Ω—É—Ç–∫—É, –ø—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
                "–£—Ç–æ—á–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ...",
                "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ..."
            ],
            'complex_request': [
                "–≠—Ç–æ –≤–∞–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–µ—Ä–µ–¥–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä—É",
                "–õ—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "–°–æ–µ–¥–∏–Ω—è—é —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"
            ],
            'error': [
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú–∏–Ω—É—Ç–∫—É...",
                "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É",
                "–ü–µ—Ä–µ–¥–∞—é –∂–∏–≤–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"
            ]
        }

    # =============== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –°–û –°–¢–û–õ–ò–ö–ê–ú–ò ===============
    
    def get_available_tables(self, date, time, guests_count, location_preference=None):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏ –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–æ–ª–∏–∫–∏
            query = """
                SELECT t.id, t.table_number, t.seats_count, t.location_type, t.description
                FROM tables t
                WHERE t.restaurant_id = 1 
                AND t.status = 'active'
                AND t.seats_count >= ?
            """
            params = [guests_count]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if location_preference:
                query += " AND t.location_type = ?"
                params.append(location_preference)
            
            cursor.execute(query, params)
            all_tables = cursor.fetchall()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å—Ç–æ–ª–∏–∫–∏ –∑–∞–Ω—è—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            cursor.execute("""
                SELECT DISTINCT table_id 
                FROM bookings 
                WHERE booking_date = ? 
                AND booking_time = ? 
                AND status != '–æ—Ç–º–µ–Ω–µ–Ω–æ'
                AND table_id IS NOT NULL
            """, (date, time))
            
            occupied_table_ids = [row[0] for row in cursor.fetchall()]
            conn.close()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏
            available_tables = []
            for table in all_tables:
                table_id, number, seats, location, description = table
                if table_id not in occupied_table_ids:
                    available_tables.append({
                        'id': table_id,
                        'number': number,
                        'seats': seats,
                        'location': location,
                        'description': description
                    })
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(available_tables)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–∞ {date} {time}")
            return available_tables
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ª–∏–∫–æ–≤: {e}")
            return []
    
    def get_table_by_preference(self, date, time, guests_count, preference_text):
        """–ù–∞–π—Ç–∏ —Å—Ç–æ–ª–∏–∫ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É –∫–ª–∏–µ–Ω—Ç–∞
            preference_mapping = {
                '–æ–∫–Ω': 'window',
                '–≤–∏–¥': 'window', 
                '—Å—Ü–µ–Ω': 'stage',
                '–º—É–∑—ã–∫': 'stage',
                '—Ç–∏—Ö': 'quiet',
                '—Å–ø–æ–∫–æ–π': 'quiet',
                'vip': 'vip',
                '–≤–∏–ø': 'vip',
                '–±–∞—Ä': 'bar',
                '—Ç–µ—Ä—Ä–∞—Å': 'terrace',
                '–±–∞–Ω–∫–µ—Ç': 'banquet',
                '–±–æ–ª—å—à': 'banquet'
            }
            
            location_type = None
            preference_lower = preference_text.lower()
            
            for keyword, location in preference_mapping.items():
                if keyword in preference_lower:
                    location_type = location
                    break
            
            # –ò—â–µ–º —Å—Ç–æ–ª–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            available_tables = self.get_available_tables(date, time, guests_count, location_type)
            
            if available_tables:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—é '{preference_text}': {len(available_tables)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                return available_tables
            else:
                print(f"‚ùå –°—Ç–æ–ª–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—é '{preference_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—é–±—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏
                return self.get_available_tables(date, time, guests_count)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º: {e}")
            return []
    
    def book_specific_table(self, table_id, customer_name, customer_phone, booking_date, booking_time, guests_count, special_requests=""):
        """–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–æ–ª–∏–∫"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–æ–ª–∏–∫–∞
            cursor.execute("""
                SELECT COUNT(*) FROM bookings 
                WHERE table_id = ? 
                AND booking_date = ? 
                AND booking_time = ? 
                AND status != '–æ—Ç–º–µ–Ω–µ–Ω–æ'
            """, (table_id, booking_date, booking_time))
            
            if cursor.fetchone()[0] > 0:
                conn.close()
                print(f"‚ùå –°—Ç–æ–ª–∏–∫ #{table_id} —É–∂–µ –∑–∞–Ω—è—Ç –Ω–∞ {booking_date} {booking_time}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–æ–ª–∏–∫–∞
            cursor.execute("""
                INSERT INTO bookings 
                (restaurant_id, table_id, customer_name, customer_phone, booking_date, booking_time, guests_count, status, special_requests)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (1, table_id, customer_name, customer_phone, booking_date, booking_time, guests_count, '–Ω–æ–≤–æ–µ', special_requests))
            
            booking_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –Ω–∞ —Å—Ç–æ–ª–∏–∫ #{table_id}")
            return booking_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞: {e}")
            return None
    
    def get_table_info(self, table_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–∏–∫–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT table_number, seats_count, location_type, description, status
                FROM tables 
                WHERE id = ? AND restaurant_id = 1
            """, (table_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                return {
                    'number': result[0],
                    'seats': result[1],
                    'location': result[2],
                    'description': result[3],
                    'status': result[4]
                }
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–ª–∏–∫–µ: {e}")
            return None
    
    def get_restaurant_tables_summary(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å—Ç–æ–ª–∏–∫–∞–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT location_type, COUNT(*), SUM(seats_count)
                FROM tables 
                WHERE restaurant_id = 1 AND status = 'active'
                GROUP BY location_type
            """)
            
            summary = cursor.fetchall()
            conn.close()
            
            result = {}
            for location, count, total_seats in summary:
                result[location] = {
                    'count': count,
                    'total_seats': total_seats
                }
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å—Ç–æ–ª–∏–∫–æ–≤: {e}")
            return {}
    
    def suggest_alternative_tables(self, date, time, guests_count, preferred_location=None):
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–æ–ª–∏–∫–æ–≤"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            exact_tables = self.get_available_tables(date, time, guests_count, preferred_location)
            
            if exact_tables:
                return {
                    'exact_match': exact_tables,
                    'alternatives': []
                }
            
            # –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            alternatives = []
            
            # 1. –°—Ç–æ–ª–∏–∫–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—Ç
            bigger_tables = self.get_available_tables(date, time, guests_count + 2)
            if bigger_tables:
                alternatives.append({
                    'type': 'bigger',
                    'description': f'–°—Ç–æ–ª–∏–∫–∏ –Ω–∞ {guests_count + 2}+ –º–µ—Å—Ç',
                    'tables': bigger_tables[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
                })
            
            # 2. –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
            if preferred_location:
                other_locations = self.get_available_tables(date, time, guests_count)
                other_locations = [t for t in other_locations if t['location'] != preferred_location]
                if other_locations:
                    alternatives.append({
                        'type': 'different_location',
                        'description': '–°—Ç–æ–ª–∏–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö –∑–æ–Ω–∞—Ö',
                        'tables': other_locations[:3]
                    })
            
            return {
                'exact_match': [],
                'alternatives': alternatives
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤: {e}")
            return {'exact_match': [], 'alternatives': []}

    # =============== –§–£–ù–ö–¶–ò–ò CONFIDENCE SCORING ===============
    
    def analyze_response_confidence(self, user_text, ai_response, context_data=None):
        """
        –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–ª–æ–≤–∞—Ä—å —Å confidence, should_escalate, reasons
        """
        confidence_score = 1.0
        should_escalate = False
        reasons = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò
        uncertainty_phrases = [
            '–≤–æ–∑–º–æ–∂–Ω–æ', '–Ω–∞–≤–µ—Ä–Ω–æ–µ', '–∫–∞–∂–µ—Ç—Å—è', '–Ω–µ —É–≤–µ—Ä–µ–Ω', '–º–æ–∂–µ—Ç –±—ã—Ç—å',
            '–≤–µ—Ä–æ—è—Ç–Ω–æ', '–¥—É–º–∞—é', '–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é', '–Ω–µ –∑–Ω–∞—é —Ç–æ—á–Ω–æ'
        ]
        
        uncertainty_count = sum(1 for phrase in uncertainty_phrases 
                              if phrase in ai_response.lower())
        if uncertainty_count > 0:
            confidence_score -= min(0.4, uncertainty_count * 0.2)
            reasons.append(f"–ù–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã: {uncertainty_count}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
        data_missing_phrases = [
            '–Ω–µ –Ω–∞–π–¥–µ–Ω', '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', '–Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏', 
            '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
        ]
        
        if any(phrase in ai_response.lower() for phrase in data_missing_phrases):
            confidence_score -= 0.3
            reasons.append("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
        complex_keywords = [
            '–±–∞–Ω–∫–µ—Ç', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '—Å–≤–∞–¥—å–±–∞', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
            '–æ—Å–æ–±–æ–µ –º–µ–Ω—é', '–∞–ª–ª–µ—Ä–≥–∏—è', '–¥–∏–µ—Ç–∞', '–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞'
        ]
        
        if any(keyword in user_text.lower() for keyword in complex_keywords):
            confidence_score -= 0.2
            should_escalate = True
            reasons.append("–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ)
        if len(ai_response.split()) < 5:
            confidence_score -= 0.2
            reasons.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
        
        # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        if confidence_score < 0.6:
            should_escalate = True
            reasons.append("–ù–∏–∑–∫–∏–π –æ–±—â–∏–π confidence")
        
        return {
            'confidence': max(0.0, confidence_score),
            'should_escalate': should_escalate,
            'reasons': reasons
        }
    
    def get_fallback_response(self, situation, confidence_analysis=None):
        """–ü–æ–ª—É—á–∏—Ç—å fallback –æ—Ç–≤–µ—Ç –¥–ª—è —Å–∏—Ç—É–∞—Ü–∏–∏"""
        import random
        
        if situation in self.fallback_phrases:
            base_response = random.choice(self.fallback_phrases[situation])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑
            if confidence_analysis and confidence_analysis['reasons']:
                reason = confidence_analysis['reasons'][0]
                if '—Å–ª–æ–∂–Ω—ã–π' in reason.lower():
                    return "–í–∞—à –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. –ü–µ—Ä–µ–¥–∞—é –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É."
            
            return base_response
        
        return "–ú–∏–Ω—É—Ç–∫—É, —É—Ç–æ—á–Ω—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."
    
    def should_request_human_help(self, user_text, conversation_history):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–º–æ—â—å —á–µ–ª–æ–≤–µ–∫–∞"""
        
        # –Ø–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
        human_request_phrases = [
            '—Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º', '—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
            '–ø–æ–∑–æ–≤–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '–∂–∏–≤–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫',
            '–Ω–µ —Ö–æ—á—É —Å –±–æ—Ç–æ–º', '–≤—ã —Ä–æ–±–æ—Ç?'
        ]
        
        if any(phrase in user_text.lower() for phrase in human_request_phrases):
            return True, "–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª —á–µ–ª–æ–≤–µ–∫–∞"
        
        # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã
        if len(conversation_history) >= 3:
            recent_messages = conversation_history[-3:]
            confusion_indicators = ['–Ω–µ –ø–æ–Ω—è–ª', '–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ', '—á—Ç–æ?', '–∫–∞–∫?']
            
            confusion_count = sum(1 for msg in recent_messages 
                                if any(indicator in msg.lower() for indicator in confusion_indicators))
            
            if confusion_count >= 2:
                return True, "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è"
        
        return False, None
    
    def log_conversation_issue(self, user_id, user_text, ai_response, confidence_analysis, issue_type):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS conversation_issues (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    user_text TEXT,
                    ai_response TEXT,
                    confidence_score REAL,
                    issue_type TEXT,
                    reasons TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    resolved BOOLEAN DEFAULT FALSE
                )
            """)
            
            cursor.execute("""
                INSERT INTO conversation_issues 
                (user_id, user_text, ai_response, confidence_score, issue_type, reasons)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                user_id, 
                user_text, 
                ai_response,
                confidence_analysis['confidence'],
                issue_type,
                ', '.join(confidence_analysis['reasons'])
            ))
            
            conn.commit()
            conn.close()
            
            print(f"üö® –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {issue_type} (confidence: {confidence_analysis['confidence']:.2f})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    # =============== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô ===============

    def get_user_bookings(self, user_phone):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT b.id, b.customer_name, b.booking_date, b.booking_time, b.guests_count, 
                       b.status, b.notes, b.created_at, b.table_id, t.table_number, t.location_type
                FROM bookings b
                LEFT JOIN tables t ON b.table_id = t.id
                WHERE b.customer_phone = ? 
                ORDER BY b.booking_date DESC, b.booking_time DESC
                LIMIT 10
            """, (user_phone,))
            
            bookings = cursor.fetchall()
            conn.close()
            
            result = []
            for booking in bookings:
                result.append({
                    'id': booking[0],
                    'name': booking[1], 
                    'date': booking[2],
                    'time': booking[3],
                    'guests': booking[4],
                    'status': booking[5],
                    'notes': booking[6],
                    'created': booking[7],
                    'table_id': booking[8],
                    'table_number': booking[9],
                    'table_location': booking[10]
                })
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return []
    
    def cancel_booking(self, booking_id, reason="–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ –ø—Ä–æ—Å—å–±–µ –∫–ª–∏–µ–Ω—Ç–∞"):
        """–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                UPDATE bookings 
                SET status = '–æ—Ç–º–µ–Ω–µ–Ω–æ', notes = notes || ' | –û–¢–ú–ï–ù–ê: ' || ?
                WHERE id = ?
            """, (reason, booking_id))
            
            if cursor.rowcount > 0:
                conn.commit()
                conn.close()
                return True
            else:
                conn.close()
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def modify_booking(self, booking_id, new_date=None, new_time=None, new_guests=None):
        """–ò–∑–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            updates = []
            values = []
            
            if new_date:
                updates.append("booking_date = ?")
                values.append(new_date)
            
            if new_time:
                updates.append("booking_time = ?") 
                values.append(new_time)
                
            if new_guests:
                updates.append("guests_count = ?")
                values.append(new_guests)
            
            if updates:
                values.append(booking_id)
                query = f"UPDATE bookings SET {', '.join(updates)} WHERE id = ?"
                
                cursor.execute(query, values)
                
                if cursor.rowcount > 0:
                    conn.commit()
                    conn.close()
                    return True
            
            conn.close()
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def check_availability(self, date, time):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT COUNT(*) FROM bookings 
                WHERE booking_date = ? AND booking_time = ? AND status != '–æ—Ç–º–µ–Ω–µ–Ω–æ'
            """, (date, time))
            
            count = cursor.fetchone()[0]
            conn.close()
            
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º —á—Ç–æ —É –Ω–∞—Å 10 —Å—Ç–æ–ª–∏–∫–æ–≤ –º–∞–∫—Å–∏–º—É–º
            return count < 10
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ
    
    def get_menu_by_category(self, category=None):
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if category:
                cursor.execute("""
                    SELECT name, description, price FROM menu_items 
                    WHERE category = ? AND restaurant_id = 1
                    ORDER BY name
                """, (category,))
            else:
                cursor.execute("""
                    SELECT category, name, description, price FROM menu_items 
                    WHERE restaurant_id = 1
                    ORDER BY category, name
                """)
            
            items = cursor.fetchall()
            conn.close()
            
            return items
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é: {e}")
            return []

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç–æ–ª–∏–∫–æ–≤
if __name__ == "__main__":
    tools = AITools()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –°–¢–û–õ–ò–ö–û–í:")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤
    print("–¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤")
    available = tools.get_available_tables("2025-06-15", "19:00", 4)
    print(f"  –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞: {len(available)}")
    for table in available[:3]:
        print(f"    –°—Ç–æ–ª–∏–∫ #{table['number']}: {table['seats']} –º–µ—Å—Ç, {table['location']}")
    
    print()
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
    print("–¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º")
    window_tables = tools.get_table_by_preference("2025-06-15", "19:00", 2, "—Ö–æ—á—É —Å—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞")
    print(f"  –°—Ç–æ–ª–∏–∫–∏ —É –æ–∫–Ω–∞: {len(window_tables)}")
    
    vip_tables = tools.get_table_by_preference("2025-06-15", "20:00", 6, "–Ω—É–∂–µ–Ω VIP —Å—Ç–æ–ª–∏–∫")
    print(f"  VIP —Å—Ç–æ–ª–∏–∫–∏: {len(vip_tables)}")
    
    print()
    
    # –¢–µ—Å—Ç 3: –°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–æ–ª–∏–∫–∞–º
    print("–¢–ï–°–¢ 3: –°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–æ–ª–∏–∫–∞–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
    summary = tools.get_restaurant_tables_summary()
    for location, info in summary.items():
        print(f"  {location}: {info['count']} —Å—Ç–æ–ª–∏–∫–æ–≤, {info['total_seats']} –º–µ—Å—Ç")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç–æ–ª–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")