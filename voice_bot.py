import asyncio
import logging
import tempfile
import os
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
import speech_recognition as sr
from pydub import AudioSegment
from gtts import gTTS
from ai_brain import AIBrain

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SmartVoiceBot:
    """
    –£–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç —Å AI Brain
    –ò–ò –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥–æ–º –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
    """
    
    def __init__(self, telegram_token: str, gemini_key: str):
        self.telegram_token = telegram_token
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Brain - –º–æ–∑–≥ —Å–∏—Å—Ç–µ–º—ã
        self.ai_brain = AIBrain(gemini_key)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        self.recognizer = sr.Recognizer()
        
        print("üé§ –£–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç —Å AI Brain –≥–æ—Ç–æ–≤!")
        print("üß† –ò–ò —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –¥–∏–∞–ª–æ–≥–∞")
        print("üîß Function Calling –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ AI Brain
        restaurant_info = self.ai_brain._get_restaurant_info()
        
        if restaurant_info.get("success"):
            greeting = restaurant_info.get("greeting", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            restaurant_name = restaurant_info.get("name", "–ù–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
            
            welcome_message = f"""
üéôÔ∏è {greeting}

ü§ñ –Ø —É–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ "{restaurant_name}"

–ß—Ç–æ —è —É–º–µ—é:
üé§ –ü–æ–Ω–∏–º–∞—é –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
üß† –ò—Å–ø–æ–ª—å–∑—É—é –ò–ò –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
ü™ë –ù–∞—Ö–æ–∂—É –∏ –±—Ä–æ–Ω–∏—Ä—É—é —Å—Ç–æ–ª–∏–∫–∏ (—É –æ–∫–Ω–∞, VIP, —Ç–∏—Ö–∏–µ –∑–æ–Ω—ã)
üìÖ –£–ø—Ä–∞–≤–ª—è—é –≤–∞—à–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
üçΩÔ∏è –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ –º–µ–Ω—é
üí¨ –ü–æ–º–Ω—é –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å:
"–•–æ—á—É —Å—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞"
"–ü–æ–∫–∞–∂–∏ –º–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
"–ö–∞–∫–æ–µ —É –≤–∞—Å –º–µ–Ω—é?"

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç!
            """
        else:
            welcome_message = "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
        
        await update.message.reply_text(welcome_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.ai_brain.save_conversation(user_id, user_name, "/start", welcome_message)
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI Brain"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        
        try:
            logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}")
            
            await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            voice_file = await update.message.voice.get_file()
            voice_data = await voice_file.download_as_bytearray()
            user_text = await self.speech_to_text(voice_data)
            
            if not user_text:
                await update.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {user_text}")
            await update.message.reply_text(f"‚úÖ –í—ã —Å–∫–∞–∑–∞–ª–∏: '{user_text}'\n\nüß† –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å...")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º AI Brain –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
            await self.process_with_ai_brain(update, user_id, user_name, user_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
            await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI Brain"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        user_text = update.message.text
        
        logger.info(f"üí¨ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {user_text}")
        
        await update.message.reply_text("üß† –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º AI Brain –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        await self.process_with_ai_brain(update, user_id, user_name, user_text)
    
    async def process_with_ai_brain(self, update: Update, user_id: int, user_name: str, user_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI Brain"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
            conversation_history = self.ai_brain.get_conversation_history(user_id)
            
            # AI Brain –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç
            ai_response = await self.ai_brain.process_message(user_id, user_text, conversation_history)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(ai_response)
            
            # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
            voice_response = await self.text_to_speech(ai_response)
            if voice_response:
                await update.message.reply_voice(voice=voice_response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
            self.ai_brain.save_conversation(user_id, user_name, user_text, ai_response)
            
            logger.info(f"‚úÖ AI Brain –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI Brain: {e}")
            await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def speech_to_text(self, audio_data):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏"""
        try:
            logger.info("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
            
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_file_path = temp_file.name
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            audio = AudioSegment.from_ogg(temp_file_path)
            wav_path = temp_file_path.replace('.ogg', '.wav')
            audio.export(wav_path, format="wav")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º
            with sr.AudioFile(wav_path) as source:
                audio_data = self.recognizer.record(source)
            
            try:
                text = self.recognizer.recognize_google(audio_data, language='ru-RU')
                logger.info("üá∑üá∫ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
                return text
            except sr.UnknownValueError:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                return None
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.unlink(temp_file_path)
                os.unlink(wav_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None
    
    async def text_to_speech(self, text: str):
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏"""
        try:
            logger.info("üîä –°–æ–∑–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç...")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞
            clean_text = ''.join(char for char in text if ord(char) < 0x1F600 or ord(char) > 0x1F64F)
            
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
                temp_file_path = temp_file.name
            
            # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å
            tts = gTTS(text=clean_text, lang='ru', slow=False)
            tts.save(temp_file_path)
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(temp_file_path, 'rb') as audio_file:
                audio_data = audio_file.read()
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)
            
            return audio_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —É–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç —Å AI Brain...")
        
        application = Application.builder().token(self.telegram_token).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üß† AI Brain —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º")
        print("üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–•–æ—á—É —Å—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞'")
        print("‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TELEGRAM_TOKEN = "7210568620:AAFWc4APgOHUBZFhnQSPkHeiOvYpbOPguNY"
    GEMINI_API_KEY = "AIzaSyC2jCwDHrqBEbP2Y4rZZn5EbI4egzPISbc"
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    bot = SmartVoiceBot(TELEGRAM_TOKEN, GEMINI_API_KEY)
    bot.run()

if __name__ == "__main__":
    main()