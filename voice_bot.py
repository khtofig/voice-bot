# –°—É–ø–µ—Ä-—É–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AI + Confidence Scoring + –°—Ç–æ–ª–∏–∫–∏
# –í–µ—Ä—Å–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã —Å—Ç–æ–ª–∏–∫–æ–≤

import asyncio
import logging
import tempfile
import os
import sqlite3
import re
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
import speech_recognition as sr
from pydub import AudioSegment
from gtts import gTTS
import google.generativeai as genai
from ai_tools import AITools

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SuperSmartVoiceBot:
    """–°—É–ø–µ—Ä-—É–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç —Å confidence scoring, fallback –ª–æ–≥–∏–∫–æ–π –∏ —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–æ–ª–∏–∫–æ–≤"""
    
    def __init__(self, telegram_token, gemini_key):
        self.telegram_token = telegram_token
        self.gemini_key = gemini_key
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
        genai.configure(api_key=self.gemini_key)
        
        try:
            self.model = genai.GenerativeModel('gemini-1.5-flash')
            print("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: gemini-1.5-flash")
        except:
            try:
                self.model = genai.GenerativeModel('gemini-1.5-pro')
                print("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: gemini-1.5-pro")
            except:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Gemini")
                self.model = None
        
        self.recognizer = sr.Recognizer()
        self.ai_tools = AITools()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        
        print("ü§ñ –°—É–ø–µ—Ä-—É–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω!")
        print("üõ°Ô∏è Confidence scoring –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("üîÑ Fallback –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        print("ü™ë –°–∏—Å—Ç–µ–º–∞ —Å—Ç–æ–ª–∏–∫–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        print("üé§ –ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ä–µ—á–∏")
    
    def save_conversation(self, user_id, user_name, message_text, bot_response):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect('restaurant.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO conversations (user_id, user_name, message_text, bot_response)
                VALUES (?, ?, ?, ?)
            """, (user_id, user_name, message_text, bot_response))
            
            conn.commit()
            conn.close()
            
            print(f"üíæ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
    
    def get_conversation_history(self, user_id, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect('restaurant.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT message_text, bot_response, timestamp 
                FROM conversations 
                WHERE user_id = ? 
                ORDER BY timestamp DESC 
                LIMIT ?
            """, (user_id, limit))
            
            history = cursor.fetchall()
            conn.close()
            
            return list(reversed(history))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    def extract_table_preferences(self, user_text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —Å—Ç–æ–ª–∏–∫–∞–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        preferences = {
            'location': None,
            'special_requests': []
        }
        
        text_lower = user_text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é
        location_mapping = {
            '–æ–∫–Ω': 'window',
            '–≤–∏–¥': 'window',
            '–ø–∞–Ω–æ—Ä–∞–º': 'window',
            '—Å—Ü–µ–Ω': 'stage', 
            '–º—É–∑—ã–∫': 'stage',
            '–∂–∏–≤–∞—è –º—É–∑—ã–∫–∞': 'stage',
            '—Ç–∏—Ö': 'quiet',
            '—Å–ø–æ–∫–æ–π': 'quiet',
            '–±–µ–∑ —à—É–º–∞': 'quiet',
            'vip': 'vip',
            '–≤–∏–ø': 'vip',
            '–æ—Å–æ–±': 'vip',
            '–≤–∞–∂': 'vip',
            '–±–∞—Ä': 'bar',
            '–±–∞—Ä–Ω': 'bar',
            '—Å—Ç–æ–π–∫': 'bar',
            '—Ç–µ—Ä—Ä–∞—Å': 'terrace',
            '–ª–µ—Ç–Ω': 'terrace',
            '–æ—Ç–∫—Ä—ã—Ç': 'terrace',
            '–±–∞–Ω–∫–µ—Ç': 'banquet',
            '–±–æ–ª—å—à': 'banquet',
            '–∫–æ–º–ø–∞–Ω–∏': 'banquet'
        }
        
        for keyword, location in location_mapping.items():
            if keyword in text_lower:
                preferences['location'] = location
                print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: {keyword} ‚Üí {location}")
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
        special_requests = []
        if '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è' in text_lower:
            special_requests.append('–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è')
        if '–≥–æ–¥–æ–≤—â–∏–Ω–∞' in text_lower:
            special_requests.append('–ì–æ–¥–æ–≤—â–∏–Ω–∞')
        if '—Ä–æ–º–∞–Ω—Ç–∏–∫' in text_lower:
            special_requests.append('–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω')
        if '–¥–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞' in text_lower or '–±–∏–∑–Ω–µ—Å' in text_lower:
            special_requests.append('–î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞')
        
        preferences['special_requests'] = special_requests
        
        return preferences
    
    def get_ai_context_with_data(self, user_id, user_text):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–∏–∫–∞—Ö"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
        history = self.get_conversation_history(user_id, limit=50)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        user_phone = None
        for message, response, timestamp in history:
            phone_match = re.search(r'\+?\d[\d\s\-\(\)]{9,}', message)
            if phone_match:
                user_phone = re.sub(r'[\s\-\(\)]', '', phone_match.group(0))
                break
        
        context = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {user_text}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
        if history:
            context += "–ö—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n"
            for message, response, timestamp in history[-3:]:
                context += f"–ö–ª–∏–µ–Ω—Ç: {message}\n–ë–æ—Ç: {response}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
        context_data = {}
        if user_phone:
            print(f"üîç –ò—â—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_phone}")
            bookings = self.ai_tools.get_user_bookings(user_phone)
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(bookings)}")
            
            context_data['bookings'] = bookings
            
            if bookings:
                context += f"–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - –£ –ö–õ–ò–ï–ù–¢–ê –ï–°–¢–¨ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø:\n"
                context += f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {user_phone}\n"
                for booking in bookings:
                    table_info = ""
                    if booking.get('table_number'):
                        table_info = f" –Ω–∞ —Å—Ç–æ–ª–∏–∫ #{booking['table_number']}"
                        if booking.get('table_location'):
                            table_info += f" ({booking['table_location']})"
                    
                    context += f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ{booking['id']}: –¥–∞—Ç–∞ {booking['date']}, –≤—Ä–µ–º—è {booking['time']}, –≥–æ—Å—Ç–µ–π {booking['guests']}, —Å—Ç–∞—Ç—É—Å '{booking['status']}'{table_info}\n"
                context += "\n"
            else:
                context += f"–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Ç–µ–ª–µ—Ñ–æ–Ω {user_phone})\n\n"
        else:
            print("üîç –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤")
            context += "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω\n\n"
        
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–∞—Ö –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        if any(word in user_text.lower() for word in ['–±—Ä–æ–Ω–∏—Ä', '—Å—Ç–æ–ª–∏–∫', '–º–µ—Å—Ç–æ', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å']):
            table_summary = self.ai_tools.get_restaurant_tables_summary()
            if table_summary:
                context += "–î–û–°–¢–£–ü–ù–´–ï –¢–ò–ü–´ –°–¢–û–õ–ò–ö–û–í –í –†–ï–°–¢–û–†–ê–ù–ï:\n"
                for location, info in table_summary.items():
                    location_name = {
                        'window': '—É –æ–∫–Ω–∞',
                        'vip': 'VIP –∑–æ–Ω–∞', 
                        'stage': '—É —Å—Ü–µ–Ω—ã',
                        'quiet': '—Ç–∏—Ö–∞—è –∑–æ–Ω–∞',
                        'bar': '—É –±–∞—Ä–∞',
                        'center': '—Ü–µ–Ω—Ç—Ä –∑–∞–ª–∞',
                        'terrace': '—Ç–µ—Ä—Ä–∞—Å–∞',
                        'banquet': '–±–∞–Ω–∫–µ—Ç–Ω—ã–π –∑–∞–ª'
                    }.get(location, location)
                    
                    context += f"- {location_name}: {info['count']} —Å—Ç–æ–ª–∏–∫–æ–≤, –≤—Å–µ–≥–æ {info['total_seats']} –º–µ—Å—Ç\n"
                context += "\n"
        
        return context, context_data
    
    def create_booking_with_table(self, customer_name, customer_phone, booking_date, booking_time, guests_count, user_text, notes=""):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —Å—Ç–æ–ª–∏–∫–∞–º"""
        try:
            print(f"ü™ë –°–æ–∑–¥–∞—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–ª–∏–∫–æ–≤ –¥–ª—è {customer_name}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
            preferences = self.extract_table_preferences(user_text)
            print(f"üîç –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {preferences}")
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–æ–ª–∏–∫–∏
            if preferences['location']:
                available_tables = self.ai_tools.get_table_by_preference(
                    booking_date, booking_time, guests_count, user_text
                )
            else:
                available_tables = self.ai_tools.get_available_tables(
                    booking_date, booking_time, guests_count
                )
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–æ–ª–∏–∫–æ–≤: {len(available_tables)}")
            
            if available_tables:
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å—Ç–æ–ª–∏–∫ (–ø–µ—Ä–≤—ã–π –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö)
                best_table = available_tables[0]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–∏–∫ #{best_table['number']} ({best_table['location']}, {best_table['seats']} –º–µ—Å—Ç)")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å –æ—Å–æ–±—ã–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏
                special_notes = notes
                if preferences['special_requests']:
                    special_notes += f" | –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {', '.join(preferences['special_requests'])}"
                
                # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–æ–ª–∏–∫
                booking_id = self.ai_tools.book_specific_table(
                    table_id=best_table['id'],
                    customer_name=customer_name,
                    customer_phone=customer_phone,
                    booking_date=booking_date,
                    booking_time=booking_time,
                    guests_count=guests_count,
                    special_requests=special_notes
                )
                
                if booking_id:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
                    location_names = {
                        'window': '—É –æ–∫–Ω–∞ —Å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º –≤–∏–¥–æ–º',
                        'vip': '–≤ VIP –∑–æ–Ω–µ',
                        'stage': '—É —Å—Ü–µ–Ω—ã —Å –∂–∏–≤–æ–π –º—É–∑—ã–∫–æ–π',
                        'quiet': '–≤ —Ç–∏—Ö–æ–π –∑–æ–Ω–µ',
                        'bar': '—É –±–∞—Ä–Ω–æ–π —Å—Ç–æ–π–∫–∏',
                        'center': '–≤ —Ü–µ–Ω—Ç—Ä–µ –∑–∞–ª–∞',
                        'terrace': '–Ω–∞ –ª–µ—Ç–Ω–µ–π —Ç–µ—Ä—Ä–∞—Å–µ',
                        'banquet': '–≤ –±–∞–Ω–∫–µ—Ç–Ω–æ–º –∑–∞–ª–µ'
                    }
                    
                    location_desc = location_names.get(best_table['location'], best_table['location'])
                    
                    response = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
                    response += f"üìã –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: #{booking_id}\n"
                    response += f"üë§ –ò–º—è: {customer_name}\n"
                    response += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
                    response += f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                    response += f"üïí –í—Ä–µ–º—è: {booking_time}\n"
                    response += f"üë• –ì–æ—Å—Ç–µ–π: {guests_count}\n"
                    response += f"ü™ë –°—Ç–æ–ª–∏–∫: #{best_table['number']} {location_desc} ({best_table['seats']} –º–µ—Å—Ç)\n"
                    
                    if best_table['description']:
                        response += f"‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {best_table['description']}\n"
                    
                    if preferences['special_requests']:
                        response += f"üéØ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {', '.join(preferences['special_requests'])}\n"
                    
                    response += f"\n‚úÖ –ñ–¥–µ–º –≤–∞—Å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ!"
                    
                    return response
                
            else:
                # –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                alternatives = self.ai_tools.suggest_alternative_tables(booking_date, booking_time, guests_count, preferences['location'])
                
                if alternatives['alternatives']:
                    response = f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–æ–ª–∏–∫–∏ "
                    if preferences['location']:
                        location_names = {
                            'window': '—É –æ–∫–Ω–∞',
                            'vip': 'VIP',
                            'stage': '—É —Å—Ü–µ–Ω—ã',
                            'quiet': '–≤ —Ç–∏—Ö–æ–π –∑–æ–Ω–µ',
                            'bar': '—É –±–∞—Ä–∞',
                            'center': '–≤ —Ü–µ–Ω—Ç—Ä–µ',
                            'terrace': '–Ω–∞ —Ç–µ—Ä—Ä–∞—Å–µ',
                            'banquet': '–±–∞–Ω–∫–µ—Ç–Ω—ã–µ'
                        }
                        response += location_names.get(preferences['location'], preferences['location'])
                    
                    response += f" –Ω–∞ {booking_date} –≤ {booking_time} –∑–∞–Ω—è—Ç—ã.\n\n"
                    response += "–ù–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:\n\n"
                    
                    for alt in alternatives['alternatives']:
                        response += f"üìç {alt['description']}:\n"
                        for table in alt['tables']:
                            response += f"‚Ä¢ –°—Ç–æ–ª–∏–∫ #{table['number']} ({table['seats']} –º–µ—Å—Ç) - {table['description']}\n"
                        response += "\n"
                    
                    response += "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?"
                    return response
                else:
                    return f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å—Ç–æ–ª–∏–∫–∏ –Ω–∞ {booking_date} –≤ {booking_time} –∑–∞–Ω—è—Ç—ã. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è?"
            
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å—Ç–æ–ª–∏–∫–∞–º–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def get_booking_in_progress(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            conn = sqlite3.connect('restaurant.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT message_text FROM conversations 
                WHERE user_id = ? 
                ORDER BY timestamp DESC 
                LIMIT 50
            """, (user_id,))
            
            messages = [row[0] for row in cursor.fetchall()]
            conn.close()
            
            booking_data = {}
            
            for msg in messages:
                # –ò—â–µ–º –∏–º—è
                name_match = re.search(r'–º–µ–Ω—è –∑–æ–≤—É—Ç\s+(\w+)|–Ω–∞ –∏–º—è\s+(\w+)|–∑–æ–≤—É—Ç\s+(\w+)', msg, re.IGNORECASE)
                if name_match and 'name' not in booking_data:
                    name = (name_match.group(1) or name_match.group(2) or name_match.group(3)).capitalize()
                    booking_data['name'] = name
                
                # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                phone_match = re.search(r'\+?\d[\d\s\-\(\)]{9,}', msg)
                if phone_match and 'phone' not in booking_data:
                    phone = re.sub(r'[\s\-\(\)]', '', phone_match.group(0))
                    booking_data['phone'] = phone
                
                # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
                if any(word in msg.lower() for word in ['–±—Ä–æ–Ω–∏—Ä', '—Å—Ç–æ–ª–∏–∫', '–Ω–æ–≤–æ–µ', '–µ—â–µ']):
                    guests_match = re.search(r'(\d+)\s*—á–µ–ª|(\d+)\s*—á–µ–ª–æ–≤–µ–∫|(\d+)\s*–ø–µ—Ä—Å–æ–Ω|(\d+)\s*–≥–æ—Å—Ç', msg, re.IGNORECASE)
                    if guests_match and 'guests' not in booking_data:
                        guests_str = guests_match.group(1) or guests_match.group(2) or guests_match.group(3) or guests_match.group(4)
                        guests = int(guests_str)
                        if 1 <= guests <= 20:
                            booking_data['guests'] = guests
                
                # –ò—â–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                if any(word in msg.lower() for word in ['–±—Ä–æ–Ω–∏—Ä', '—Å—Ç–æ–ª–∏–∫', '–Ω–æ–≤–æ–µ', '–µ—â–µ']) and 'date' not in booking_data:
                    today = datetime.now()
                    if '–∑–∞–≤—Ç—Ä–∞' in msg.lower() and '–ø–æ—Å–ª–µ' not in msg.lower():
                        booking_data['date'] = (today + timedelta(days=1)).strftime('%Y-%m-%d')
                    elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in msg.lower():
                        booking_data['date'] = (today + timedelta(days=2)).strftime('%Y-%m-%d')
                
                if any(word in msg.lower() for word in ['–±—Ä–æ–Ω–∏—Ä', '—Å—Ç–æ–ª–∏–∫', '–Ω–æ–≤–æ–µ', '–µ—â–µ']):
                    time_match = re.search(r'(\d{1,2}):(\d{2})|–≤\s+(\d{1,2})|–Ω–∞\s+(\d{1,2})\s*—á–∞—Å', msg, re.IGNORECASE)
                    if time_match and 'time' not in booking_data:
                        if time_match.group(1) and time_match.group(2):
                            booking_data['time'] = f"{int(time_match.group(1)):02d}:{time_match.group(2)}"
                        else:
                            hour_str = time_match.group(3) or time_match.group(4)
                            hour = int(hour_str)
                            if 10 <= hour <= 23:
                                booking_data['time'] = f"{hour:02d}:00"
            
            return booking_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {}
    
    def should_create_new_booking(self, user_text, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ù–û–í–û–ï –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        
        new_booking_keywords = [
            '–Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–µ—â–µ –æ–¥–Ω–æ', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ', 
            '–≤—Ç–æ—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥—Ä—É–≥–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            '—Ö–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ', '–Ω—É–∂–Ω–æ –µ—â–µ'
        ]
        
        text_lower = user_text.lower()
        wants_new = any(keyword in text_lower for keyword in new_booking_keywords)
        
        history = self.get_conversation_history(user_id, limit=10)
        
        recent_bookings = 0
        for message, response, timestamp in history:
            if '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ' in response.lower() or '–Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' in response.lower() or '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' in response.lower():
                recent_bookings += 1
        
        if recent_bookings > 0:
            return wants_new
        
        return '–±—Ä–æ–Ω–∏—Ä' in text_lower or '—Å—Ç–æ–ª–∏–∫' in text_lower
    
    def check_and_create_booking_with_tables(self, text, user_name, user_id):
        """–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –° –£–ß–ï–¢–û–ú –°–¢–û–õ–ò–ö–û–í"""
        
        if not self.should_create_new_booking(text, user_id):
            return None
        
        booking_data = self.get_booking_in_progress(user_id)
        
        required_fields = ['name', 'phone', 'guests']
        missing = [field for field in required_fields if field not in booking_data]
        
        if not missing:
            if 'date' not in booking_data:
                booking_data['date'] = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
            
            if 'time' not in booking_data:
                booking_data['time'] = "19:00"
            
            # –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–ª–∏–∫–æ–≤
            return self.create_booking_with_table(
                customer_name=booking_data['name'],
                customer_phone=booking_data['phone'],
                booking_date=booking_data['date'],
                booking_time=booking_data['time'],
                guests_count=booking_data['guests'],
                user_text=text,  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                notes=f"–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ —É–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}"
            )
        
        return None
    
    def get_restaurant_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –∏–∑ –±–∞–∑—ã"""
        try:
            conn = sqlite3.connect('restaurant.db')
            cursor = conn.cursor()
            
            cursor.execute("SELECT name, phone, address, working_hours, greeting_message FROM restaurants WHERE id = 1")
            restaurant_data = cursor.fetchone()
            
            cursor.execute("SELECT category, name, description, price FROM menu_items WHERE restaurant_id = 1 LIMIT 5")
            menu_items = cursor.fetchall()
            
            conn.close()
            
            if restaurant_data:
                name, phone, address, working_hours, greeting = restaurant_data
                
                menu_text = ""
                if menu_items:
                    menu_text = "\n\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞:\n"
                    for category, item_name, description, price in menu_items:
                        menu_text += f"‚Ä¢ {item_name} - {price}‚ÇΩ\n"
                
                return {
                    'name': name,
                    'phone': phone, 
                    'address': address,
                    'working_hours': working_hours,
                    'greeting': greeting,
                    'menu': menu_text
                }
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {e}")
            return None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        
        ai_status = "üß† –ò–ò –ø–æ–¥–∫–ª—é—á–µ–Ω" if self.model else "‚ö†Ô∏è –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        restaurant = self.get_restaurant_info()
        if restaurant and restaurant['greeting']:
            greeting = restaurant['greeting']
        else:
            greeting = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω!"
        
        welcome_message = f"""
üéôÔ∏è {greeting}

–ß—Ç–æ —è —É–º–µ—é:
üé§ –ü–æ–Ω–∏–º–∞—é –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
üîä –û—Ç–≤–µ—á–∞—é –≥–æ–ª–æ—Å–æ–º  
üìä –†–∞–±–æ—Ç–∞—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
ü™ë –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–æ–ª–∏–∫–æ–≤ (—É –æ–∫–Ω–∞, VIP, —Ç–∏—Ö–∏–µ –∑–æ–Ω—ã)
üìÖ –£–ø—Ä–∞–≤–ª—è—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –æ—Ç–º–µ–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
üçΩÔ∏è –†–∞—Å—Å–∫–∞–∂—É –æ –º–µ–Ω—é –∏ —Ü–µ–Ω–∞—Ö
üß† –ü–æ–º–Ω—é –≤—Å–µ –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
üõ°Ô∏è –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ confidence scoring
üîÑ Fallback –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
{ai_status}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å: "–•–æ—á—É —Å—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞"
        """
        
        await update.message.reply_text(welcome_message)
        self.save_conversation(user_id, user_name, "/start", welcome_message)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–æ–ª–∏–∫–æ–≤")
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å confidence checking"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        
        try:
            print(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id})")
            
            await update.message.reply_text("üé§ –°–ª—É—à–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            voice_file = await update.message.voice.get_file()
            voice_data = await voice_file.download_as_bytearray()
            
            user_text = await self.speech_to_text(voice_data)
            
            if not user_text:
                fallback_response = self.ai_tools.get_fallback_response('error')
                await update.message.reply_text(fallback_response)
                return
            
            print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {user_text}")
            await update.message.reply_text(f"‚úÖ –í—ã —Å–∫–∞–∑–∞–ª–∏: '{user_text}'\n\nü§î –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–æ–ª–∏–∫–∏...")
            
            bot_response = await self.process_message_with_confidence(user_id, user_name, user_text)
            
            await update.message.reply_text(bot_response)
            
            voice_response = await self.text_to_speech(bot_response)
            if voice_response:
                await update.message.reply_voice(voice=voice_response)
            
            self.save_conversation(user_id, user_name, user_text, bot_response)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
            fallback_response = self.ai_tools.get_fallback_response('error')
            await update.message.reply_text(fallback_response)
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å confidence checking"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        user_text = update.message.text
        
        print(f"üí¨ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {user_text}")
        
        await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–æ–ª–∏–∫–∏...")
        
        bot_response = await self.process_message_with_confidence(user_id, user_name, user_text)
        
        await update.message.reply_text(bot_response)
        
        voice_response = await self.text_to_speech(bot_response)
        if voice_response:
            await update.message.reply_voice(voice=voice_response)
        
        self.save_conversation(user_id, user_name, user_text, bot_response)
    
    async def process_message_with_confidence(self, user_id, user_name, user_text):
        """–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å confidence checking + —Å—Ç–æ–ª–∏–∫–∏"""
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–º–æ—â—å —á–µ–ª–æ–≤–µ–∫–∞
        conversation_history = self.get_conversation_history(user_id)
        needs_human, reason = self.ai_tools.should_request_human_help(user_text, [msg[0] for msg in conversation_history])
        
        if needs_human:
            print(f"üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å —á–µ–ª–æ–≤–µ–∫–∞: {reason}")
            return self.ai_tools.get_fallback_response('complex_request')
        
        # 2. –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –° –£–ß–ï–¢–û–ú –°–¢–û–õ–ò–ö–û–í
        booking_response = self.check_and_create_booking_with_tables(user_text, user_name, user_id)
        if booking_response:
            return booking_response
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–ª–∏–∫–æ–≤
        context, context_data = self.get_ai_context_with_data(user_id, user_text)
        
        if self.model:
            ai_response = await self.get_ai_response(context, user_id)
        else:
            ai_response = self.get_simple_response(user_text, user_name)
        
        # 4. –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú CONFIDENCE –û–¢–í–ï–¢–ê –ò–ò
        if ai_response:
            confidence_analysis = self.ai_tools.analyze_response_confidence(
                user_text, ai_response, context_data
            )
            
            print(f"üîç Confidence: {confidence_analysis['confidence']:.2f}")
            print(f"üîç –≠—Å–∫–∞–ª–∞—Ü–∏—è: {confidence_analysis['should_escalate']}")
            print(f"üîç –ü—Ä–∏—á–∏–Ω—ã: {confidence_analysis['reasons']}")
            
            # 5. –ü–†–ò–ù–ò–ú–ê–ï–ú –†–ï–®–ï–ù–ò–ï –ù–ê –û–°–ù–û–í–ï CONFIDENCE
            if confidence_analysis['should_escalate']:
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
                self.ai_tools.log_conversation_issue(
                    user_id, user_text, ai_response, confidence_analysis, "low_confidence"
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç
                if confidence_analysis['confidence'] < 0.4:
                    return self.ai_tools.get_fallback_response('complex_request', confidence_analysis)
                else:
                    return self.ai_tools.get_fallback_response('low_confidence', confidence_analysis)
            
            # 6. –ï—Å–ª–∏ confidence –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò
            return ai_response
        
        # 7. –ï—Å–ª–∏ –ò–ò –≤–æ–æ–±—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
        return self.ai_tools.get_fallback_response('error')
    
    async def speech_to_text(self, audio_data):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç"""
        try:
            print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç...")
            
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_file_path = temp_file.name
            
            audio = AudioSegment.from_ogg(temp_file_path)
            wav_path = temp_file_path.replace('.ogg', '.wav')
            audio.export(wav_path, format="wav")
            
            with sr.AudioFile(wav_path) as source:
                audio_data = self.recognizer.record(source)
            
            try:
                text = self.recognizer.recognize_google(audio_data, language='ru-RU')
                print("üá∑üá∫ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
            except sr.UnknownValueError:
                try:
                    text = self.recognizer.recognize_google(audio_data, language='az-AZ')
                    print("üá¶üáø –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞ –∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–æ–º")
                except sr.UnknownValueError:
                    text = None
            
            os.unlink(temp_file_path)
            os.unlink(wav_path)
            
            return text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None
    
    async def get_ai_response(self, context, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini AI —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ò —Å—Ç–æ–ª–∏–∫–æ–≤"""
        try:
            print("üß† –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —É –ò–ò —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–ª–∏–∫–æ–≤...")
            
            restaurant = self.get_restaurant_info()
            
            if restaurant:
                restaurant_info = f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {restaurant['name']}
- –ê–¥—Ä–µ—Å: {restaurant['address']}
- –¢–µ–ª–µ—Ñ–æ–Ω: {restaurant['phone']}
- –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {restaurant['working_hours']}
"""
            else:
                restaurant_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            
            prompt = f"""
–¢—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.

{restaurant_info}

–í–ê–ñ–ù–û: –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∏–∂–µ –µ—Å—Ç—å –í–°–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –ò –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–∞—Ö.

–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–∫–∞–∑–∞–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:
- –ü–µ—Ä–µ—á–∏—Å–ª–∏ –í–°–ï –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–æ–º–µ—Ä–∞–º–∏
- –ù–∞–∑–æ–≤–∏ –¥–∞—Ç—ã, –≤—Ä–µ–º—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π, —Å—Ç–æ–ª–∏–∫–∏
- –£–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å—ã

–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–∞—Ö —Å—Ç–æ–ª–∏–∫–æ–≤
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—É –æ–∫–Ω–∞, VIP, —Ç–∏—Ö–∏–µ –∑–æ–Ω—ã)
- –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞

–ö–û–ù–¢–ï–ö–°–¢ –ö–õ–ò–ï–ù–¢–ê:
{context}

–û—Ç–≤–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ —Å—Ç–æ–ª–∏–∫–∏):
"""
            
            response = await asyncio.to_thread(self.model.generate_content, prompt)
            ai_text = response.text.strip()
            
            print(f"üß† AI –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–ª–∏–∫–æ–≤: {ai_text}")
            return ai_text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò: {e}")
            return None
    
    def get_simple_response(self, user_text, user_name):
        """–ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        text_lower = user_text.lower()
        
        if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'salam']):
            return f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω!"
        
        elif any(word in text_lower for word in ['–±—Ä–æ–Ω—å', '—Å—Ç–æ–ª–∏–∫', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å']):
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            if '–æ–∫–Ω' in text_lower:
                return "–î–ª—è —Å—Ç–æ–ª–∏–∫–∞ —É –æ–∫–Ω–∞ —Å–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π."
            elif 'vip' in text_lower or '–≤–∏–ø' in text_lower:
                return "–î–ª—è VIP —Å—Ç–æ–ª–∏–∫–∞ —Å–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π."
            else:
                return "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ —Å–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: —É –æ–∫–Ω–∞, VIP –∑–æ–Ω–∞, —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ."
        
        else:
            return f"–ü–æ–Ω—è–ª! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
    
    async def text_to_speech(self, text):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –≥–æ–ª–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            print("üîä –°–æ–∑–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç...")
            
            if any(char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in text.lower()):
                lang = 'ru'
            else:
                lang = 'az'
            
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
                temp_file_path = temp_file.name
            
            try:
                tts = gTTS(text=text, lang=lang, slow=False)
                tts.save(temp_file_path)
                
                with open(temp_file_path, 'rb') as audio_file:
                    audio_data = audio_file.read()
                
                os.unlink(temp_file_path)
                return audio_data
                
            except Exception as network_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞: {network_error}")
                
                if os.path.exists(temp_file_path):
                    os.unlink(temp_file_path)
                
                return None
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {e}")
            return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—É–ø–µ—Ä-—É–º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–æ–ª–∏–∫–æ–≤...")
        
        application = Application.builder().token(self.telegram_token).build()
        
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–æ–ª–∏–∫–æ–≤!")
        print("ü™ë –£–º–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω")
        print("üõ°Ô∏è Fallback –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        print("üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        print("üìä –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–•–æ—á—É —Å—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞'")
        print("‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    TELEGRAM_TOKEN = "7210568620:AAFWc4APgOHUBZFhnQSPkHeiOvYpbOPguNY"
    GEMINI_API_KEY = "AIzaSyC2jCwDHrqBEbP2Y4rZZn5EbI4egzPISbc"
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É–ø–µ—Ä-—É–º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–æ–ª–∏–∫–æ–≤...")
    bot = SuperSmartVoiceBot(TELEGRAM_TOKEN, GEMINI_API_KEY)
    bot.run()

if __name__ == "__main__":
    main()