import sqlite3
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import google.generativeai as genai
from google.generativeai.types import FunctionDeclaration, Tool
import asyncio

logger = logging.getLogger(__name__)

class AIBrain:
   """
   –ù–∞—Å—Ç–æ—è—â–∏–π AI-–º–æ–∑–≥ —Å–∏—Å—Ç–µ–º—ã —Å Function Calling
   –ò–ò –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥–æ–º
   """
   
   def __init__(self, gemini_key: str, db_path: str = 'restaurant.db'):
       self.db_path = db_path
       
       # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini —Å Function Calling
       genai.configure(api_key=gemini_key)
       
       # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å tools
       self.model = genai.GenerativeModel(
           'gemini-1.5-flash',
           tools=[Tool(function_declarations=self._get_function_declarations())]
       )
       
       # –ó–∞—â–∏—Ç–∞ –æ—Ç Prompt Injection
       self.dangerous_patterns = [
           'ignore', 'forget', 'delete', 'system', 'admin', 'root',
           'drop table', 'truncate', 'bypass', 'override', 'disable'
       ]
       
       logger.info("üß† AI-–º–æ–∑–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Function Calling")
   
   def _get_function_declarations(self) -> List[FunctionDeclaration]:
       """–§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –ò–ò –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å"""
       return [
           FunctionDeclaration(
               name="search_tables",
               description="–ù–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏ –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è",
               parameters={
                   "type": "object",
                   "properties": {
                       "date": {"type": "string", "description": "–î–∞—Ç–∞ YYYY-MM-DD"},
                       "time": {"type": "string", "description": "–í—Ä–µ–º—è HH:MM"},
                       "guests": {"type": "integer", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π"},
                       "location": {"type": "string", "description": "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: window, vip, quiet, stage, bar, center, terrace, banquet"}
                   },
                   "required": ["date", "time", "guests"]
               }
           ),
           FunctionDeclaration(
               name="create_booking",
               description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
               parameters={
                   "type": "object",
                   "properties": {
                       "name": {"type": "string", "description": "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"},
                       "phone": {"type": "string", "description": "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞"},
                       "date": {"type": "string", "description": "–î–∞—Ç–∞ YYYY-MM-DD"},
                       "time": {"type": "string", "description": "–í—Ä–µ–º—è HH:MM"},
                       "guests": {"type": "integer", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π"},
                       "table_id": {"type": "integer", "description": "ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞"},
                       "requests": {"type": "string", "description": "–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"}
                   },
                   "required": ["name", "phone", "date", "time", "guests", "table_id"]
               }
           ),
           FunctionDeclaration(
               name="find_bookings",
               description="–ù–∞–π—Ç–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
               parameters={
                   "type": "object",
                   "properties": {
                       "phone": {"type": "string", "description": "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞"}
                   },
                   "required": ["phone"]
               }
           ),
           FunctionDeclaration(
               name="get_menu",
               description="–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
               parameters={
                   "type": "object",
                   "properties": {
                       "category": {"type": "string", "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª—é–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"}
                   }
               }
           ),
           FunctionDeclaration(
               name="get_restaurant_info",
               description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
               parameters={
                   "type": "object",
                   "properties": {}
               }
           )
       ]
   
   def sanitize_input(self, text: str) -> str:
       """–ó–∞—â–∏—Ç–∞ –æ—Ç Prompt Injection"""
       text_lower = text.lower()
       
       for pattern in self.dangerous_patterns:
           if pattern in text_lower:
               logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
               return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å."
       
       if len(text) > 2000:
           logger.warning(f"üö® –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(text)}")
           return text[:2000]
       
       return text
   
   async def process_message(self, user_id: int, user_text: str, conversation_history: List[str]) -> str:
       """
       –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
       """
       try:
           # –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π
           clean_text = self.sanitize_input(user_text)
           if clean_text != user_text:
               return clean_text
           
           # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
           context = self._build_ai_context(user_id, user_text, conversation_history)
           
           # –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
           response = await self._call_ai_with_functions(context)
           
           # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ò–ò
           self._log_ai_decision(user_id, user_text, response)
           
           return response
           
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
           return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
   
   def _build_ai_context(self, user_id: int, user_text: str, history: List[str]) -> str:
       """–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò"""
       
       # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
       restaurant_info = self._get_restaurant_context()
       
       # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
       recent_history = "\n".join(history[-5:]) if history else "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
       
       context = f"""
–¢—ã —É–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –¢—ã –î–û–õ–ñ–ï–ù –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–°–¢–û–†–ê–ù–ï:
{restaurant_info}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
{recent_history}

–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: {user_text}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —á—Ç–æ —Ö–æ—á–µ—Ç –∫–ª–∏–µ–Ω—Ç
2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å—Ç–æ–ª–∏–∫–∏ - –≤—ã–∑–æ–≤–∏ search_tables
3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å - –≤—ã–∑–æ–≤–∏ create_booking  
4. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Å–≤–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–∑–æ–≤–∏ find_bookings
5. –ï—Å–ª–∏ –ø—Ä–æ –º–µ–Ω—é - –≤—ã–∑–æ–≤–∏ get_menu
6. –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ
7. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
8. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?
"""
       return context
   
   def _get_restaurant_context(self) -> str:
       """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
       try:
           conn = sqlite3.connect(self.db_path)
           cursor = conn.cursor()
           
           cursor.execute("SELECT name, phone, address, working_hours FROM restaurants WHERE id = 1")
           restaurant = cursor.fetchone()
           
           conn.close()
           
           if restaurant:
               return f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant[0]}, –¢–µ–ª–µ—Ñ–æ–Ω: {restaurant[1]}, –ê–¥—Ä–µ—Å: {restaurant[2]}, –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {restaurant[3]}"
           else:
               return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
               
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {e}")
           return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ"
   
   async def _call_ai_with_functions(self, context: str) -> str:
       """–í—ã–∑–æ–≤ –ò–ò —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
       try:
           # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
           response = await asyncio.to_thread(self.model.generate_content, context)
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏
           if response.candidates[0].content.parts:
               for part in response.candidates[0].content.parts:
                   if hasattr(part, 'function_call') and part.function_call:
                       # –ò–ò –≤—ã–∑–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é - –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë
                       function_result = await self._execute_function(part.function_call)
                       
                       # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –ò–ò
                       follow_up = await asyncio.to_thread(self.model.generate_content, [
                           context,
                           response,
                           genai.types.FunctionResponse(
                               name=part.function_call.name,
                               response=function_result
                           )
                       ])
                       
                       return follow_up.text
           
           # –ò–ò –æ—Ç–≤–µ—Ç–∏–ª –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π
           return response.text
           
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ò–ò: {e}")
           return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç."
   
   async def _execute_function(self, function_call) -> Dict:
       """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—É—é –≤—ã–∑–≤–∞–ª –ò–ò"""
       function_name = function_call.name
       args = dict(function_call.args)
       
       logger.info(f"ü§ñ –ò–ò –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é: {function_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {args}")
       
       try:
           if function_name == "search_tables":
               return self._search_tables(**args)
           elif function_name == "create_booking":
               return self._create_booking(**args)
           elif function_name == "find_bookings":
               return self._find_bookings(**args)
           elif function_name == "get_menu":
               return self._get_menu(**args)
           elif function_name == "get_restaurant_info":
               return self._get_restaurant_info()
           else:
               return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"}
               
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {function_name}: {e}")
           return {"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}"}
   
   def _log_ai_decision(self, user_id: int, user_text: str, ai_response: str):
       """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ò–ò"""
       try:
           conn = sqlite3.connect(self.db_path)
           cursor = conn.cursor()
           
           cursor.execute("""
               CREATE TABLE IF NOT EXISTS ai_decisions_log (
                   id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER,
                   user_message TEXT,
                   ai_response TEXT,
                   timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
               )
           """)
           
           cursor.execute("""
               INSERT INTO ai_decisions_log (user_id, user_message, ai_response)
               VALUES (?, ?, ?)
           """, (user_id, user_text, ai_response))
           
           conn.commit()
           conn.close()
           
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
   
   # ========== –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========
   
   def _search_tables(self, date: str, time: str, guests: int, location: str = None) -> Dict:
       """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤"""
       try:
           conn = sqlite3.connect(self.db_path)
           cursor = conn.cursor()
           
           # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
           query = """
               SELECT t.id, t.table_number, t.seats_count, t.location_type, t.description
               FROM tables t
               WHERE t.restaurant_id = 1 
               AND t.status = 'active'
               AND t.seats_count >= ?
           """
           params = [guests]
           
           # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é
           if location:
               query += " AND t.location_type = ?"
               params.append(location)
           
           cursor.execute(query, params)
           all_tables = cursor.fetchall()
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å
           cursor.execute("""
               SELECT DISTINCT table_id 
               FROM bookings 
               WHERE booking_date = ? 
               AND booking_time = ? 
               AND status != '–æ—Ç–º–µ–Ω–µ–Ω–æ'
               AND table_id IS NOT NULL
           """, (date, time))
           
           occupied_ids = [row[0] for row in cursor.fetchall()]
           conn.close()
           
           # –°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏
           available = []
           for table in all_tables:
               table_id, number, seats, loc, desc = table
               if table_id not in occupied_ids:
                   available.append({
                       'id': table_id,
                       'number': number,
                       'seats': seats,
                       'location': loc,
                       'description': desc
                   })
           
           return {
               "success": True,
               "tables": available,
               "count": len(available)
           }
           
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ª–∏–∫–æ–≤: {e}")
           return {"success": False, "error": str(e)}
   
   def _create_booking(self, name: str, phone: str, date: str, time: str, guests: int, table_id: int, requests: str = "") -> Dict:
       """–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
       try:
           conn = sqlite3.connect(self.db_path)
           cursor = conn.cursor()
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å—Ç–æ–ª–∏–∫
           cursor.execute("""
               SELECT COUNT(*) FROM bookings 
               WHERE table_id = ? 
               AND booking_date = ? 
               AND booking_time = ? 
               AND status != '–æ—Ç–º–µ–Ω–µ–Ω–æ'
           """, (table_id, date, time))
           
           if cursor.fetchone()[0] > 0:
               conn.close()
               return {"success": False, "error": "–°—Ç–æ–ª–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è"}
           
           # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
           cursor.execute("""
               INSERT INTO bookings 
               (restaurant_id, table_id, customer_name, customer_phone, booking_date, booking_time, guests_count, status, special_requests)
               VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
           """, (1, table_id, name, phone, date, time, guests, '–Ω–æ–≤–æ–µ', requests))
           
           booking_id = cursor.lastrowid
           
           # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –æ —Å—Ç–æ–ª–∏–∫–µ
           cursor.execute("""
               SELECT table_number, location_type, description
               FROM tables WHERE id = ?
           """, (table_id,))
           
           table_info = cursor.fetchone()
           conn.commit()
           conn.close()
           
           return {
               "success": True,
               "booking_id": booking_id,
               "table_number": table_info[0],
               "table_location": table_info[1],
               "table_description": table_info[2]
           }
           
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
           return {"success": False, "error": str(e)}
   
   def _find_bookings(self, phone: str) -> Dict:
       """–ü–æ–∏—Å–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞"""
       try:
           conn = sqlite3.connect(self.db_path)
           cursor = conn.cursor()
           
           cursor.execute("""
               SELECT b.id, b.customer_name, b.booking_date, b.booking_time, 
                      b.guests_count, b.status, b.special_requests, 
                      t.table_number, t.location_type
               FROM bookings b
               LEFT JOIN tables t ON b.table_id = t.id
               WHERE b.customer_phone = ? 
               ORDER BY b.booking_date DESC, b.booking_time DESC
               LIMIT 10
           """, (phone,))
           
           bookings = cursor.fetchall()
           conn.close()
           
           result = []
           for booking in bookings:
               result.append({
                   'id': booking[0],
                   'name': booking[1],
                   'date': booking[2],
                   'time': booking[3],
                   'guests': booking[4],
                   'status': booking[5],
                   'requests': booking[6],
                   'table_number': booking[7],
                   'table_location': booking[8]
               })
           
           return {
               "success": True,
               "bookings": result,
               "count": len(result)
           }
           
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
           return {"success": False, "error": str(e)}
   
   def _get_menu(self, category: str = None) -> Dict:
       """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é"""
       try:
           conn = sqlite3.connect(self.db_path)
           cursor = conn.cursor()
           
           if category:
               cursor.execute("""
                   SELECT name, description, price FROM menu_items 
                   WHERE category = ? AND restaurant_id = 1
                   ORDER BY name
               """, (category,))
           else:
               cursor.execute("""
                   SELECT category, name, description, price FROM menu_items 
                   WHERE restaurant_id = 1
                   ORDER BY category, name
               """)
           
           items = cursor.fetchall()
           conn.close()
           
           menu_data = []
           for item in items:
               if category:
                   menu_data.append({
                       'name': item[0],
                       'description': item[1],
                       'price': item[2]
                   })
               else:
                   menu_data.append({
                       'category': item[0],
                       'name': item[1],
                       'description': item[2],
                       'price': item[3]
                   })
           
           return {
               "success": True,
               "menu": menu_data,
               "count": len(menu_data)
           }
           
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é: {e}")
           return {"success": False, "error": str(e)}
   
   def _get_restaurant_info(self) -> Dict:
       """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ"""
       try:
           conn = sqlite3.connect(self.db_path)
           cursor = conn.cursor()
           
           cursor.execute("""
               SELECT name, phone, address, working_hours, greeting_message, ai_personality
               FROM restaurants WHERE id = 1
           """)
           
           restaurant = cursor.fetchone()
           conn.close()
           
           if restaurant:
               return {
                   "success": True,
                   "name": restaurant[0],
                   "phone": restaurant[1],
                   "address": restaurant[2],
                   "hours": restaurant[3],
                   "greeting": restaurant[4],
                   "personality": restaurant[5]
               }
           else:
               return {"success": False, "error": "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"}
               
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ: {e}")
           return {"success": False, "error": str(e)}
   
   def save_conversation(self, user_id: int, user_name: str, message_text: str, bot_response: str):
       """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
       try:
           conn = sqlite3.connect(self.db_path)
           cursor = conn.cursor()
           
           cursor.execute("""
               INSERT INTO conversations (user_id, user_name, message_text, bot_response)
               VALUES (?, ?, ?, ?)
           """, (user_id, user_name, message_text, bot_response))
           
           conn.commit()
           conn.close()
           
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
   
   def get_conversation_history(self, user_id: int, limit: int = 10) -> List[str]:
       """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
       try:
           conn = sqlite3.connect(self.db_path)
           cursor = conn.cursor()
           
           cursor.execute("""
               SELECT message_text, bot_response FROM conversations 
               WHERE user_id = ? 
               ORDER BY timestamp DESC 
               LIMIT ?
           """, (user_id, limit))
           
           history = cursor.fetchall()
           conn.close()
           
           # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
           result = []
           for message, response in reversed(history):
               result.append(f"–ö–ª–∏–µ–Ω—Ç: {message}")
               result.append(f"–ë–æ—Ç: {response}")
           
           return result
           
       except Exception as e:
           logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
           return []