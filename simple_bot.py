import asyncio
import logging
import tempfile
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler, CallbackQueryHandler
import speech_recognition as sr
from pydub import AudioSegment
from gtts import gTTS
import google.generativeai as genai
from database import RestaurantDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class RestaurantBotWithDatabase:
    def __init__(self, telegram_token, gemini_key):
        self.telegram_token = telegram_token
        self.gemini_key = gemini_key
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db = RestaurantDatabase()
        print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –±–æ—Ç—É")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
        if gemini_key and gemini_key != "–í–°–¢–ê–í–¨–¢–ï_–í–ê–®_–ö–õ–Æ–ß":
            genai.configure(api_key=self.gemini_key)
            self.model = genai.GenerativeModel('gemini-1.5-flash')
            print("ü§ñ Gemini AI –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            self.model = None
            print("‚ö†Ô∏è Gemini AI –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (—Ä–∞–±–æ—Ç–∞—é –≤ –ø—Ä–æ—Å—Ç–æ–º —Ä–µ–∂–∏–º–µ)")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        self.recognizer = sr.Recognizer()
        
        print("‚úÖ –ë–æ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤!")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –¢–ï–ü–ï–†–¨ –ß–ò–¢–ê–ï–¢ –ò–ó –ë–ê–ó–´"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ –±–∞–∑—ã
        restaurant_data = self.db.get_restaurant_data()
        
        if not restaurant_data:
            await update.message.reply_text("‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        name, phone, address, working_hours, greeting_message, ai_personality = restaurant_data
        
        keyboard = [
            [InlineKeyboardButton("üìû –ò–º–∏—Ç–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="demo_call")],
            [InlineKeyboardButton("üçΩÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑ –±–∞–∑—ã", callback_data="show_menu")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ", callback_data="restaurant_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_message = f"""
ü§ñ <b>–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>

<b>üíæ –î–ê–ù–ù–´–ï –ò–ó –ë–ê–ó–´:</b>

üè™ <b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> {name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üìç <b>–ê–¥—Ä–µ—Å:</b> {address}
‚è∞ <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> {working_hours}

ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò:</b>
<i>"{ai_personality}"</i>

<b>üí¨ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞:</b>
<i>"{greeting_message}"</i>

‚úÖ <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!</b>
        """
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "demo_call":
            await self.start_demo_call(query)
        elif query.data == "show_menu":
            await self.show_menu_from_db(query)
        elif query.data == "restaurant_info":
            await self.show_restaurant_info(query)
        elif query.data == "back_to_main":  # ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
            await self.show_main_menu(query)  # ‚Üê –ò –≠–¢–£   
         
    
    async def start_demo_call(self, query):
        """–î–µ–º–æ-–∑–≤–æ–Ω–æ–∫ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ò–ó –ë–ê–ó–´"""
        restaurant_data = self.db.get_restaurant_data()
        greeting_message = restaurant_data[4]  # greeting_message
        
        await query.edit_message_text(f"""
üìû <b>–î–ï–ú–û-–ó–í–û–ù–û–ö –ù–ê–ß–ê–¢</b>

ü§ñ <b>–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –±–∞–∑—ã):</b>
"{greeting_message}"

üé§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç</b>

<i>–ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤</i>
        """, parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting_audio = await self.text_to_speech(greeting_message)
        if greeting_audio:
            await query.message.reply_voice(voice=greeting_audio)
    
    async def show_menu_from_db(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•"""
        menu_items = self.db.get_menu_items()
        
        if not menu_items:
            await query.edit_message_text("üìã –ú–µ–Ω—é –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É")
            return
        
        menu_text = "üçΩÔ∏è <b>–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö):</b>\n\n"
        
        current_category = ""
        for category, name, description, price in menu_items:
            if category != current_category:
                menu_text += f"\n<b>üî∏ {category}:</b>\n"
                current_category = category
            
            menu_text += f"‚Ä¢ <b>{name}</b> - {price}‚ÇΩ\n"
            if description:
                menu_text += f"  <i>{description}</i>\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(menu_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def show_restaurant_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –∏–∑ –±–∞–∑—ã"""
        restaurant_data = self.db.get_restaurant_data()
        name, phone, address, working_hours, greeting_message, ai_personality = restaurant_data
        
        info_text = f"""
    
üè™ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ</b>
<i>(–¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã)</i>

üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üìç <b>–ê–¥—Ä–µ—Å:</b> {address}
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {working_hours}

ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>
<b>–õ–∏—á–Ω–æ—Å—Ç—å –ò–ò:</b> {ai_personality}

<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b> {greeting_message}
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(info_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ –±–∞–∑—ã
        restaurant_data = self.db.get_restaurant_data()
        
        if not restaurant_data:
            await query.edit_message_text("‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        name, phone, address, working_hours, greeting_message, ai_personality = restaurant_data
        
        keyboard = [
            [InlineKeyboardButton("üìû –ò–º–∏—Ç–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="demo_call")],
            [InlineKeyboardButton("üçΩÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑ –±–∞–∑—ã", callback_data="show_menu")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ", callback_data="restaurant_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_message = f"""
ü§ñ <b>–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>

<b>üíæ –î–ê–ù–ù–´–ï –ò–ó –ë–ê–ó–´:</b>

üè™ <b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> {name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üìç <b>–ê–¥—Ä–µ—Å:</b> {address}
‚è∞ <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> {working_hours}

ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò:</b>
<i>"{ai_personality}"</i>

<b>üí¨ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞:</b>
<i>"{greeting_message}"</i>

‚úÖ <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!</b>
        """
        
        await query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –° –î–ê–ù–ù–´–ú–ò –ò–ó –ë–ê–ó–´"""
        try:
            await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            voice_file = await update.message.voice.get_file()
            voice_data = await voice_file.download_as_bytearray()
            customer_text = await self.speech_to_text(voice_data)
            
            if not customer_text:
                await update.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                return
            
            await update.message.reply_text(f"üë§ <b>–ö–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª:</b> {customer_text}", parse_mode='HTML')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–°–ü–û–õ–¨–ó–£–Ø –î–ê–ù–ù–´–ï –ò–ó –ë–ê–ó–´
            bot_response = await self.generate_response_from_database(customer_text)
            
            await update.message.reply_text(f"ü§ñ <b>–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:</b> {bot_response}", parse_mode='HTML')
            
            # –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            response_audio = await self.text_to_speech(bot_response)
            if response_audio:
                await update.message.reply_voice(voice=response_audio)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            customer_text = update.message.text
            await update.message.reply_text(f"üë§ <b>–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª:</b> {customer_text}", parse_mode='HTML')
        
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            bot_response = await self.generate_response_from_database(customer_text)
        
            await update.message.reply_text(f"ü§ñ <b>–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:</b> {bot_response}", parse_mode='HTML')
        
            # –ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –æ–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            response_audio = await self.text_to_speech(bot_response)
            if response_audio:
                await update.message.reply_voice(voice=response_audio)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def generate_response_from_database(self, customer_text):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–°–ü–û–õ–¨–ó–£–Ø –î–ê–ù–ù–´–ï –ò–ó –ë–ê–ó–´"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ –±–∞–∑—ã
        restaurant_data = self.db.get_restaurant_data()
        menu_items = self.db.get_menu_items()
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        name, phone, address, working_hours, greeting_message, ai_personality = restaurant_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω—é
        menu_text = ""
        for category, item_name, description, price in menu_items[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –±–ª—é–¥
            menu_text += f"- {item_name}: {price}‚ÇΩ ({description})\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å Gemini AI
        if self.model:
            prompt = f"""
–¢—ã {ai_personality} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ "{name}".

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–°–¢–û–†–ê–ù–ï (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö):
- –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
- –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
- –ê–¥—Ä–µ—Å: {address}
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {working_hours}

–ù–ê–®–ï –ú–ï–ù–Æ:
{menu_text}

–ö–õ–ò–ï–ù–¢ –°–ö–ê–ó–ê–õ: "{customer_text}"

–û—Ç–≤–µ—Ç—å –∫–∞–∫ {ai_personality}. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ.
–ü–æ–º–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–¥–æ 50 —Å–ª–æ–≤) –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.
            """
            
            try:
                response = await asyncio.to_thread(self.model.generate_content, prompt)
                return response.text.strip()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if "–º–µ–Ω—é" in customer_text.lower():
            return f"–£ –Ω–∞—Å –µ—Å—Ç—å: {menu_items[0][1]} –∑–∞ {menu_items[0][3]}‚ÇΩ, {menu_items[1][1]} –∑–∞ {menu_items[1][3]}‚ÇΩ –∏ –¥—Ä—É–≥–∏–µ –±–ª—é–¥–∞."
        elif "–≤—Ä–µ–º—è" in customer_text.lower() or "—Ä–∞–±–æ—Ç–∞" in customer_text.lower():
            return f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º {working_hours}."
        elif "–∞–¥—Ä–µ—Å" in customer_text.lower():
            return f"–ù–∞—à –∞–¥—Ä–µ—Å: {address}."
        else:
            return f"–ü–æ–Ω—è–ª! –ü–æ–º–æ–≥—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ {name}. –£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –∏ –≤—Ä–µ–º—è."
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–º (—Ç–µ –∂–µ —á—Ç–æ –±—ã–ª–∏)
    async def speech_to_text(self, audio_data):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏"""
        try:
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_file_path = temp_file.name
            
            audio = AudioSegment.from_ogg(temp_file_path)
            wav_path = temp_file_path.replace('.ogg', '.wav')
            audio.export(wav_path, format="wav")
            
            with sr.AudioFile(wav_path) as source:
                audio_data = self.recognizer.record(source)
            
            try:
                text = self.recognizer.recognize_google(audio_data, language='ru-RU')
            except sr.UnknownValueError:
                text = None
            
            os.unlink(temp_file_path)
            os.unlink(wav_path)
            return text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return None
    
    async def text_to_speech(self, text):
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏"""
        try:
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
                temp_file_path = temp_file.name
            
            tts = gTTS(text=text, lang='ru', slow=False)
            tts.save(temp_file_path)
            
            with open(temp_file_path, 'rb') as audio_file:
                audio_data = audio_file.read()
            
            os.unlink(temp_file_path)
            return audio_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.telegram_token).build()
        
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CallbackQueryHandler(self.button_callback))
        application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))  # ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
        
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    TELEGRAM_TOKEN = "7210568620:AAFWc4APgOHUBZFhnQSPkHeiOvYpbOPguNY"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    GEMINI_API_KEY = "AIzaSyC2jCwDHrqBEbP2Y4rZZn5EbI4egzPISbc"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
    
    bot = RestaurantBotWithDatabase(TELEGRAM_TOKEN, GEMINI_API_KEY)
    bot.run()